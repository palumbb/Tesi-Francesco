[2024-10-29 10:39:17,731][flwr][WARNING] - Both server and strategy were provided, ignoring strategy
[2024-10-29 10:39:17,733][flwr][INFO] - Starting Flower simulation, config: num_rounds=5, no round_timeout
[2024-10-29 10:39:31,759][flwr][INFO] - Flower VCE: Ray initialized with resources: {'CPU': 8.0, 'node:__internal_head__': 1.0, 'node:127.0.0.1': 1.0, 'memory': 735213159.0, 'object_store_memory': 367606579.0}
[2024-10-29 10:39:31,762][flwr][INFO] - Optimize your simulation with Flower VCE: https://flower.ai/docs/framework/how-to-run-simulations.html
[2024-10-29 10:39:31,763][flwr][INFO] - Flower VCE: Resources for each Virtual Client: {'num_cpus': 4, 'num_gpus': 0.0}
[2024-10-29 10:39:31,806][flwr][INFO] - Flower VCE: Creating VirtualClientEngineActorPool with 2 actors
[2024-10-29 10:39:31,809][flwr][INFO] - [INIT]
[2024-10-29 10:39:31,811][flwr][INFO] - Requesting initial parameters from one random client
[2024-10-29 10:39:40,088][flwr][INFO] - Received initial parameters from one random client
[2024-10-29 10:39:40,089][flwr][INFO] - Starting evaluation of initial global parameters
[2024-10-29 10:39:40,134][flwr][ERROR] - 0D or 1D target tensor expected, multi-target not supported
[2024-10-29 10:39:40,147][flwr][ERROR] - Traceback (most recent call last):
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\flwr\simulation\app.py", line 339, in start_simulation
    hist = run_fl(
           ^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\flwr\server\server.py", line 492, in run_fl
    hist, elapsed_time = server.fit(
                         ^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\flwr\server\server.py", line 95, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\flwr\server\strategy\fedavg.py", line 167, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Riccardo\Desktop\PoliMi\Tesi-Francesco\servers\server_scaffold.py", line 255, in evaluate
    loss, accuracy, f1_score = test_multi(net, testloader, device=device)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Riccardo\Desktop\PoliMi\Tesi-Francesco\model\multiclassnet.py", line 350, in test_multi
    loss = criterion(output, target)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\torch\nn\modules\module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\torch\nn\modules\module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\torch\nn\modules\loss.py", line 1188, in forward
    return F.cross_entropy(input, target, weight=self.weight,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Riccardo\miniconda3\envs\flower\Lib\site-packages\torch\nn\functional.py", line 3104, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: 0D or 1D target tensor expected, multi-target not supported

[2024-10-29 10:39:40,162][flwr][ERROR] - Your simulation crashed :(. This could be because of several reasons. The most common are: 
	 > Sometimes, issues in the simulation code itself can cause crashes. It's always a good idea to double-check your code for any potential bugs or inconsistencies that might be contributing to the problem. For example: 
		 - You might be using a class attribute in your clients that hasn't been defined.
		 - There could be an incorrect method call to a 3rd party library (e.g., PyTorch).
		 - The return types of methods in your clients/strategies might be incorrect.
	 > Your system couldn't fit a single VirtualClient: try lowering `client_resources`.
	 > All the actors in your pool crashed. This could be because: 
		 - You clients hit an out-of-memory (OOM) error and actors couldn't recover from it. Try launching your simulation with more generous `client_resources` setting (i.e. it seems {'num_cpus': 4, 'num_gpus': 0.0} is not enough for your run). Use fewer concurrent actors. 
		 - You were running a multi-node simulation and all worker nodes disconnected. The head node might still be alive but cannot accommodate any actor with resources: {'num_cpus': 4, 'num_gpus': 0.0}.
Take a look at the Flower simulation examples for guidance <https://flower.ai/docs/framework/how-to-run-simulations.html>.
